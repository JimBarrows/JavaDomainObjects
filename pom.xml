<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.nsfwenterprises.biz360</groupId>
	<artifactId>Biz360</artifactId>
	<version>1.0-SNAPSHOT</version>
	<name>Biz 360 Master</name>
	<packaging>pom</packaging>
	<url>http://nsfwenterprises.com</url>
	<licenses>
		<license>
			<name>Apache 2</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
			<comments>A business-friendly OSS license</comments>
		</license>
	</licenses>

	<developers>
		<developer>
			<id>Jim.Barrows</id>
			<name>Jim Barrows</name>
			<email>Jim.Barrows@gmail.com</email>
			<url>jamesbarrows.blogspot.com</url>
			<organization>NSFW Enterprises, LLC</organization>
			<organizationUrl>http://nsfwenterprises.com</organizationUrl>
			<roles>
				<role>architect</role>
				<role>developer</role>
			</roles>
			<timezone>-7</timezone>
		</developer>
	</developers>

	<issueManagement>
		<system>Redmine</system>
		<url>http://nsfwenterprises.com/projects/projects/show/bmp?jump=welcome</url>
	</issueManagement>

	<scm>
		<connection>scm:git:ssh://bizondemand.com/var/local/git/biz360.git</connection>
		<developerConnection>scm:git:ssh://bizondemand.com/var/local/git/biz360.git</developerConnection>
		<tag>HEAD</tag>
		<url>ssh://bizondemand.com/var/local/git/biz360.git</url>
	</scm>

	<properties>
		<spring.version>3.0.5.RELEASE</spring.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<powermock.version>1.4.9</powermock.version>
		<postgres-driver.version>9.0-801.jdbc4</postgres-driver.version>
		<hibernate.version>3.6.4.Final</hibernate.version>
		<hibernate-annotations.version>3.5.6-Final</hibernate-annotations.version>
		<hibernate-validator>4.1.0.Final</hibernate-validator>
		<org.slf4j.version>1.6.1</org.slf4j.version>
	</properties>

	<modules>
		<module>accounting-model</module>
		<module>accounting-invoice-model</module>
		<module>accounting-order-model</module>
		<module>accounting-product-model</module>
		<module>agreement-model</module>
		<module>business-service</module>
		<module>business-ui-web</module>
		<module>ecommerce-model</module>
		<module>humanresources-model</module>
		<module>humanresourses-invoice-model</module>
		<module>invoice-model</module>
		<module>invoice-shipment</module>
		<module>model-utils</module>
		<module>order-model</module>
		<module>party-model</module>
		<module>party-ui-web</module>
		<module>product-model</module>
		<module>shipment-model</module>
		<module>workeffort-model</module>
		<module>workeffort-humanresources-model</module>
		<module>party-services</module>
	</modules>
	<profiles>
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>tomcat-maven-plugin</artifactId>
						<version>1.1</version>
						<configuration>
							<username>tomcat</username>
							<password>tomcat</password>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>test</id>
		</profile>
		<profile>
			<id>production</id>
		</profile>
	</profiles>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>postgresql</groupId>
				<artifactId>postgresql</artifactId>
				<version>${postgres-driver.version}</version>
			</dependency>
			<dependency>
				<groupId>org.hibernate</groupId>
				<artifactId>hibernate-core</artifactId>
				<version>${hibernate.version}</version>
			</dependency>
			<dependency>
				<groupId>org.hibernate</groupId>
				<artifactId>hibernate-entitymanager</artifactId>
				<version>${hibernate.version}</version>
			</dependency>
			<dependency>
				<groupId>org.hibernate</groupId>
				<artifactId>hibernate-annotations</artifactId>
				<version>${hibernate-annotations.version}</version>
			</dependency>
			<dependency>
				<groupId>org.hibernate</groupId>
				<artifactId>hibernate-validator</artifactId>
				<version>${hibernate-validator}</version>
			</dependency>
			<dependency>
				<groupId>javassist</groupId>
				<artifactId>javassist</artifactId>
				<version>3.12.1.GA</version>
				<type>jar</type>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>commons-dbcp</groupId>
				<artifactId>commons-dbcp</artifactId>
				<version>1.4</version>
				<type>jar</type>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>joda-time</groupId>
				<artifactId>joda-time</artifactId>
				<version>1.6</version>
			</dependency>
			<dependency>
				<groupId>org.jadira.usertype</groupId>
				<artifactId>usertype.jodatime</artifactId>
				<version>1.9</version>
				<type>jar</type>
				<scope>compile</scope>
			</dependency>
			<!-- Core utilities used by other modules. Define this if you use Spring 
				Utility APIs (org.springframework.core.*/org.springframework.util.*) -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-core</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<!-- Expression Language (depends on spring-core) Define this if you use 
				Spring Expression APIs (org.springframework.expression.*) -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-expression</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<!-- Bean Factory and JavaBeans utilities (depends on spring-core) Define 
				this if you use Spring Bean APIs (org.springframework.beans.*) -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-beans</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<!-- Aspect Oriented Programming (AOP) Framework (depends on spring-core, 
				spring-beans) Define this if you use Spring AOP APIs (org.springframework.aop.*) -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-aop</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<!-- Application Context (depends on spring-core, spring-expression, spring-aop, 
				spring-beans) This is the central artifact for Spring's Dependency Injection 
				Container and is generally always defined -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>
				<version>${spring.version}</version>
				<exclusions>
					<!-- Exclude Commons Logging in favor of SLF4j -->
					<exclusion>
						<groupId>commons-logging</groupId>
						<artifactId>commons-logging</artifactId>
					</exclusion>
				</exclusions>
			</dependency>

			<!-- Various Application Context utilities, including EhCache, JavaMail, 
				Quartz, and Freemarker integration Define this if you need any of these integrations -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context-support</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<!-- Transaction Management Abstraction (depends on spring-core, spring-beans, 
				spring-aop, spring-context) Define this if you use Spring Transactions or 
				DAO Exception Hierarchy (org.springframework.transaction.*/org.springframework.dao.*) -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-tx</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<!-- JDBC Data Access Library (depends on spring-core, spring-beans, spring-context, 
				spring-tx) Define this if you use Spring's JdbcTemplate API (org.springframework.jdbc.*) -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-jdbc</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<!-- Object-to-Relation-Mapping (ORM) integration with Hibernate, JPA, 
				and iBatis. (depends on spring-core, spring-beans, spring-context, spring-tx) 
				Define this if you need ORM (org.springframework.orm.*) -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-orm</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<!-- Object-to-XML Mapping (OXM) abstraction and integration with JAXB, 
				JiBX, Castor, XStream, and XML Beans. (depends on spring-core, spring-beans, 
				spring-context) Define this if you need OXM (org.springframework.oxm.*) -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-oxm</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<!-- Web application development utilities applicable to both Servlet 
				and Portlet Environments (depends on spring-core, spring-beans, spring-context) 
				Define this if you use Spring MVC, or wish to use Struts, JSF, or another 
				web framework with Spring (org.springframework.web.*) -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-web</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<!-- Spring MVC for Servlet Environments (depends on spring-core, spring-beans, 
				spring-context, spring-web) Define this if you use Spring MVC with a Servlet 
				Container such as Apache Tomcat (org.springframework.web.servlet.*) -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-webmvc</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<!-- Spring MVC for Portlet Environments (depends on spring-core, spring-beans, 
				spring-context, spring-web) Define this if you use Spring MVC with a Portlet 
				Container (org.springframework.web.portlet.*) -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-webmvc-portlet</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<!-- Support for testing Spring applications with tools such as JUnit 
				and TestNG This artifact is generally always defined with a 'test' scope 
				for the integration testing framework and unit testing stubs -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-test</artifactId>
				<version>${spring.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${org.slf4j.version}</version>
			</dependency>
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>jcl-over-slf4j</artifactId>
				<version>${org.slf4j.version}</version>
				<scope>runtime</scope>
			</dependency>
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-log4j12</artifactId>
				<version>${org.slf4j.version}</version>
				<scope>runtime</scope>
			</dependency>
			<dependency>
				<groupId>log4j</groupId>
				<artifactId>log4j</artifactId>
				<version>1.2.16</version>
				<scope>runtime</scope>
			</dependency>
			<dependency>
				<groupId>org.codehaus.jackson</groupId>
				<artifactId>jackson-mapper-asl</artifactId>
				<version>1.6.4</version>
			</dependency>
		</dependencies>


	</dependencyManagement>

	<repositories>
		<repository>
			<id>JBoss-Release</id>
			<name>JBoss Release Repository</name>
			<url>https://repository.jboss.org/nexus/content/repositories/releases/</url>
		</repository>
		<repository>
			<id>maven2-repository.dev.java.net</id>
			<name>Java.net Repository for Maven</name>
			<url>http://download.java.net/maven/2/</url>
			<layout>default</layout>
		</repository>
		<repository>
			<id>maven-repository.dev.java.net</id>
			<name>Java.net Maven 1 Repository (legacy)</name>
			<url>http://download.java.net/maven/1</url>
		</repository>


	</repositories>

	<pluginRepositories>
	</pluginRepositories>


	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.7</version>
			<scope>test</scope>
		</dependency>


		<dependency>
			<groupId>org.jbehave.web</groupId>
			<artifactId>jbehave-web-selenium</artifactId>
			<version>3.1.1</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jbehave</groupId>
			<artifactId>jbehave-core</artifactId>
			<version>3.1.2</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.geronimo.specs</groupId>
			<artifactId>geronimo-ejb_3.1_spec</artifactId>
			<version>1.0</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-module-junit4</artifactId>
			<version>${powermock.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-api-mockito</artifactId>
			<version>${powermock.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.8.5</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.3</version>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.5.10</version>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.5.10</version>
		</dependency>

		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>3.2.1</version>
		</dependency>

		<dependency>
			<groupId>javax</groupId>
			<artifactId>javaee-api</artifactId>
			<version>6.0</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
			<!-- <plugin> <groupId>org.jbehave</groupId> <artifactId>jbehave-maven-plugin</artifactId> 
				<version>3.1.2</version> <executions> <execution> <id>run-stories-as-embeddables</id> 
				<phase>integration-test</phase> <configuration> <includes> <include>**/*Stories.java</include> 
				</includes> <metaFilters> <metaFilter>+author *</metaFilter> <metaFilter>-skip</metaFilter> 
				</metaFilters> <systemProperties> <property> <name>java.awt.headless</name> 
				<value>true</value> </property> </systemProperties> <ignoreFailureInStories>true</ignoreFailureInStories> 
				<ignoreFailureInView>false</ignoreFailureInView> </configuration> <goals> 
				<goal>run-stories-as-embeddables</goal> </goals> </execution> </executions> 
				</plugin> -->
		</plugins>
	</build>

</project>
